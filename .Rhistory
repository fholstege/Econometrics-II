## Part D
dfEarnings$unemployed = as.factor(ifelse(is.na(dfEarnings$logWage),1,0))
length(levels(vUnemployed))
vUnemployed = dfEarnings$unemployed
length(levels(vUnemployed))
heckit1 = heckit(selection = vUnemployed ~ vMarried,
outcome = vLogWages~ vSchooling + vAge + vAge^2,
method="2step")
## Part D
dfEarnings$unemployed = as.factor(ifelse(is.na(dfEarnings$logWage),1,0))
heckit1 = heckit(selection = unemployed ~ married,
outcome = logWage~ schooling + age + age2,
data=dfEarnings,
method="2step")
heckman = heckit(selection = unemployed ~ married,
outcome = logWage~ schooling + age + age2,
data=dfEarnings,
method="2step")
length(levels(dfEarnings$unemployed))
## Part D
dfEarnings$unemployed = as.factor(ifelse(is.na(dfEarnings$logWage),TRUE,FALSE))
heckman = heckit(selection = unemployed ~ married,
outcome = logWage~ schooling + age + age2,
data=dfEarnings,
method="2step")
heckman = heckit(selection = selection = unemployed ~ married,
heckman = heckit(outcome = unemployed ~ married,
selection = logWage~ schooling + age + age2,
data=dfEarnings,
method="2step")
heckman = heckit(selection = married ~ unemployed,
outcome = logWage~ schooling + age + age2,
data=dfEarnings,
method="2step")
## Part D
data("Mroz87")
View(Mroz87)
heckman_step1 = glm(unemployed ~ married, data = dfEarnigns, family = binomial(link="probit"))
heckman_step1 = glm(unemployed ~ married, data = dfEarnings, family = binomial(link="probit"))
Zgamma = cbind(1,dfEarnings$married) %*% coef(heckman_step1)
Zgamma
Zgamma = cbind(1,dfEarnings$married) * coef(heckman_step1)
Zgamma
coef(heckman_step1)
Zgamma = cbind(1,dfEarnings$married) %*% coef(heckman_step1)
head(Zgamma, 5)
pnorm(Zgamma, 0,1)
help(dnorm)
pdfNorm_Zgamma = dnorm(Zgamma, 0,1)
cdfNorm_zgamma = pnorm(Zgamma, 0,1)
MillsRatio= pdfNorm_Zgamma/cdfNorm_zgamma
lm(logWage ~ schooling + age + age2, data=dfEarnings)
lm(logWage ~ schooling + age + age2 + MillsRatio, data=dfEarnings)
heckman_step2 = lm(logWage ~ schooling + age + age2 + MillsRatio, data=dfEarnings)
heckman_step2 = lm(logWage ~ schooling + age + age2 + MillsRatio, data=dfEarnings)
summary(heckman_step2)
View(dfEarnings)
# create indicator variable for unemployed
dfEarnings$unemployed = as.factor(ifelse(is.na(dfEarnings$logWage),0,1))
# create indicator variable for unemployed
dfEarnings$unemployed = as.factor(ifelse(is.na(dfEarnings$logWage),0,1))
# step 1 of heckman: use probit to estimate gamma
heckman_step1 = glm(unemployed ~ married, data = dfEarnings, family = binomial(link="probit"))
# use gamma to reconstruct millsratio
Zgamma = cbind(1,dfEarnings$married) %*% coef(heckman_step1)
pdfNorm_Zgamma = dnorm(Zgamma, 0,1)
cdfNorm_zgamma = pnorm(Zgamma, 0,1)
MillsRatio= pdfNorm_Zgamma/cdfNorm_zgamma
# step 2 of heckman: add millsratio to regular OLS with selected variables
heckman_step2 = lm(logWage ~ schooling + age + age2 + MillsRatio, data=dfEarnings)
# create indicator variable for unemployed
dfEarnings$unemployed = as.factor(ifelse(is.na(dfEarnings$logWage),0,1))
# step 1 of heckman: use probit to estimate gamma
heckman_step1 = glm(unemployed ~ married, data = dfEarnings, family = binomial(link="probit"))
# use gamma to reconstruct millsratio
Zgamma = cbind(1,dfEarnings$married) %*% coef(heckman_step1)
# create indicator variable for unemployed
dfEarnings$unemployed = as.factor(ifelse(is.na(dfEarnings$logWage),0,1))
View(dfEarnings)
# step 1 of heckman: use probit to estimate gamma
heckman_step1 = glm(unemployed ~ married, data = dfEarnings, family = binomial(link="probit"))
heckman_step1
# use gamma to reconstruct millsratio
Zgamma = cbind(1,dfEarnings$married) %*% coef(heckman_step1)
# use gamma to reconstruct millsratio
Zgamma = cbind(1,dfEarnings$married) %*% coef(heckman_step1)
pdfNorm_Zgamma = dnorm(Zgamma, 0,1)
cdfNorm_zgamma = pnorm(Zgamma, 0,1)
MillsRatio= pdfNorm_Zgamma/cdfNorm_zgamma
invMillsRatio= pdfNorm_Zgamma/cdfNorm_zgamma
# step 2 of heckman: add millsratio to regular OLS with selected variables
heckman_step2 = lm(logWage ~ schooling + age + age2 + invMillsRatio, data=dfEarnings)
heckit(selection = unemployed ~ married,
outcome = logWage ~ schooling + age + age2,
data = dfEarnings,
method="2step")
# using sample selection package
heckit(selection = unemployed ~ married,
outcome = logWage ~ schooling + age + age2,
data = dfEarnings,
method="ML")
coef(heckman_step2)
coef(heckman_step2)$invMillsRatio
coef(heckman_step2)[-1]
coef(heckman_step2)[ncol(heckman_step2)]
coef(heckman_step2)[5]
RhoSigma = coef(heckman_step2)[5]
# using sample selection package
heckman_package= heckit(selection = unemployed ~ married,
outcome = logWage ~ schooling + age + age2,
data = dfEarnings,
method="2step")
heckman_package
heckman_package[5]
heckman_package[4] * heckman_package[5]
heckman_package[4]
heckman_package$sigma* heckman_package$rho
# using sample selection package
heckit(selection = unemployed ~ married,
outcome = logWage ~ schooling + age + age2,
data = dfEarnings,
method="ML")
lParam = c(c(0,0),0,0,0)
lParam[0]
# define log-likelihood function
LL <- function(lParam, vY, mX, Zgamma, vI){
mbeta = lParam$beta
mXbeta = mX %*% mbeta
gamma = lParam$gamma
rho = lParam$rho
sigma = lParam$sigma
logL = sum(((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2)))))
return(-logL)
}
lParam = list(beta = c(0,0),gamma = 0,rho = 0, sigma = 0)
lParam$beta
optim(lParam, LL, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
# define log-likelihood function
LL <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam$beta1, lParam$beta2)
mXbeta = mX %*% mbeta
gamma = lParam$gamma
rho = lParam$rho
sigma = lParam$sigma
logL = sum(((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2)))))
return(-logL)
}
lParam = list(beta1 = 0, beta2 = 0,gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
lParam$beta1
# define log-likelihood function
LL <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam$beta1, lParam$beta2)
mXbeta = mX %*% mbeta
print(mXbeta)
gamma = lParam$gamma
rho = lParam$rho
sigma = lParam$sigma
logL = sum(((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2)))))
return(-logL)
}
lParam = list(beta1 = 0, beta2 = 0,gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
c(lParam$beta1, lParam$beta2)
# define log-likelihood function
LL_selection <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam$beta1, lParam$beta2)
mXbeta = mX %*% mbeta
gamma = lParam$gamma
rho = lParam$rho
sigma = lParam$sigma
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = dfEarnings$unemployed
lParam = list(beta1 = 0, beta2 = 0,gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
# define log-likelihood function
LL_selection <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam[["beta1"]], lParam[["beta2"]])
mXbeta = mX %*% mbeta
gamma = lParam[["gamma"]]
rho = lParam[["rho"]]
sigma = lParam[["sigma"]]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = dfEarnings$unemployed
lParam = list(beta1 = 0, beta2 = 0,gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
ncol(mX)
# define log-likelihood function
LL_selection <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam[["beta1"]], lParam[["beta2"]], lParam[["beta3"]], lParam["beta4"])
mXbeta = mX %*% mbeta
gamma = lParam[["gamma"]]
rho = lParam[["rho"]]
sigma = lParam[["sigma"]]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = dfEarnings$unemployed
lParam = list(beta1 = 0, beta2 = 0,beta3 = 0, beta4 = 0,
gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
vI
vI = unfactor(dfEarnings$unemployed)
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = unfactor(dfEarnings$unemployed)
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
vI[1:5]
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
lParam = list(beta1 = 0, beta2 = 0,beta3 = 0, beta4 = 0,
gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
lParam = c(beta1 = 0, beta2 = 0,beta3 = 0, beta4 = 0,
gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
lParam
lParam[["beta1"]]
# define log-likelihood function
LL_selection <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam[["beta1"]], lParam[["beta2"]], lParam[["beta3"]], lParam["beta4"])
mXbeta = mX %*% mbeta
gamma = lParam[["gamma"]]
rho = lParam[["rho"]]
sigma = lParam[["sigma"]]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
lParam = c(beta1 = 0, beta2 = 0,beta3 = 0, beta4 = 0,
gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
help(optim)
optim(par=lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
optim(par=lParam, fn=LL_selection, method="BFGS",vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
help(mle)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI=vI)
# define log-likelihood function
LL_selection <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam[["beta1"]], lParam[["beta2"]], lParam[["beta3"]], lParam[["beta4"]])
mXbeta = mX %*% mbeta
gamma = lParam[["gamma"]]
rho = lParam[["rho"]]
sigma = lParam[["sigma"]]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
lParam = c(beta1 = 0, beta2 = 0,beta3 = 0, beta4 = 0,
gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI=vI)
lParam[["beta4"]]
# define log-likelihood function
LL_selection <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
lParam = c(0,0,0,0,0,0,0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI=vI)
# define log-likelihood function
LL_selection <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
lParam = c(1,1,1,1,1,1,1)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI=vI)
lParam = c(0,0,0,0,0,0,0)
typeof(vI)
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
lParam = c(0,0,0,0,0,0,0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI=vI)
optim(lParam, LL_selection)
lParam[7]
optim(lParam, LL_selection, method="BFGS")
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2), log.p = TRUE)))
)
return(-logL)
}
lParam = c(0,0,0,0,0,0,0)
optim(lParam, LL_selection, method="BFGS")
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma,log.p = TRUE))) +
(vI * log((dnorm((vY- mXbeta)/sigma, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2), log.p = TRUE)))
)
return(-logL)
}
lParam = c(0,0,0,0,0,0,0)
optim(lParam, LL_selection, method="BFGS")
optim(lParam, LL_selection)
lParam = c(1,1,1,1,1,1,1)
optim(lParam, LL_selection)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))) +
(vI * log((dnorm((vY- mXbeta)/sigma,,mean=1,sd=1, ,log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),,mean=1,sd=1, ,log.p = TRUE)))
)
return(-logL)
}
lParam = c(1,1,1,1,1,1,1)
optim(lParam, LL_selection)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))) +
(vI * log((dnorm((vY- mXbeta)/sigma,,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),,mean=1,sd=1, ,log.p = TRUE)))
)
return(-logL)
}
lParam = c(1,1,1,1,1,1,1)
optim(lParam, LL_selection)
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))) +
(vI * log((dnorm((vY- mXbeta)/sigma,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),mean=1,sd=1, ,log.p = TRUE)))
)
return(-logL)
}
lParam = c(1,1,1,1,1,1,1)
optim(lParam, LL_selection)
LL_selection(lParam)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))) +
(vI * log((dnorm((vY- mXbeta)/sigma,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),mean=1,sd=1, ,log.p = TRUE)))
)
print(logL)
return(-logL)
}
LL_selection(lParam)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
part1 = log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))
print(part1)
part2 = log((dnorm((vY- mXbeta)/sigma,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),mean=1,sd=1, ,log.p = TRUE))
print(part2)
logL = sum(
((1 - vI)* log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))) +
(vI * log((dnorm((vY- mXbeta)/sigma,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),mean=1,sd=1, ,log.p = TRUE)))
)
return(-logL)
}
lParam = c(1,1,1,1,1,1,1)
LL_selection(lParam)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
part1 = log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))
print(part1[1:10])
part2 = log((dnorm((vY- mXbeta)/sigma,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),mean=1,sd=1, ,log.p = TRUE))
print(part2[1:10])
logL = sum(
((1 - vI)* log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))) +
(vI * log((dnorm((vY- mXbeta)/sigma,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),mean=1,sd=1, ,log.p = TRUE)))
)
return(-logL)
}
lParam = c(1,1,1,1,1,1,1)
LL_selection(lParam)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
part1 = pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE)
print(part1[1:10])
part2 = (dnorm((vY- mXbeta)/sigma,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),mean=1,sd=1, ,log.p = TRUE)
print(part2[1:10])
