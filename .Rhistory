print(mXbeta)
gamma = lParam$gamma
rho = lParam$rho
sigma = lParam$sigma
logL = sum(((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2)))))
return(-logL)
}
lParam = list(beta1 = 0, beta2 = 0,gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
c(lParam$beta1, lParam$beta2)
# define log-likelihood function
LL_selection <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam$beta1, lParam$beta2)
mXbeta = mX %*% mbeta
gamma = lParam$gamma
rho = lParam$rho
sigma = lParam$sigma
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = dfEarnings$unemployed
lParam = list(beta1 = 0, beta2 = 0,gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
# define log-likelihood function
LL_selection <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam[["beta1"]], lParam[["beta2"]])
mXbeta = mX %*% mbeta
gamma = lParam[["gamma"]]
rho = lParam[["rho"]]
sigma = lParam[["sigma"]]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = dfEarnings$unemployed
lParam = list(beta1 = 0, beta2 = 0,gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
ncol(mX)
# define log-likelihood function
LL_selection <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam[["beta1"]], lParam[["beta2"]], lParam[["beta3"]], lParam["beta4"])
mXbeta = mX %*% mbeta
gamma = lParam[["gamma"]]
rho = lParam[["rho"]]
sigma = lParam[["sigma"]]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = dfEarnings$unemployed
lParam = list(beta1 = 0, beta2 = 0,beta3 = 0, beta4 = 0,
gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
vI
vI = unfactor(dfEarnings$unemployed)
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = unfactor(dfEarnings$unemployed)
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
vI[1:5]
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
lParam = list(beta1 = 0, beta2 = 0,beta3 = 0, beta4 = 0,
gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
lParam = c(beta1 = 0, beta2 = 0,beta3 = 0, beta4 = 0,
gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
lParam
lParam[["beta1"]]
# define log-likelihood function
LL_selection <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam[["beta1"]], lParam[["beta2"]], lParam[["beta3"]], lParam["beta4"])
mXbeta = mX %*% mbeta
gamma = lParam[["gamma"]]
rho = lParam[["rho"]]
sigma = lParam[["sigma"]]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
lParam = c(beta1 = 0, beta2 = 0,beta3 = 0, beta4 = 0,
gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
help(optim)
optim(par=lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
optim(par=lParam, fn=LL_selection, method="BFGS",vY = vY, mX = mX, Zgamma = Zgamma, vI = vI)
help(mle)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI=vI)
# define log-likelihood function
LL_selection <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam[["beta1"]], lParam[["beta2"]], lParam[["beta3"]], lParam[["beta4"]])
mXbeta = mX %*% mbeta
gamma = lParam[["gamma"]]
rho = lParam[["rho"]]
sigma = lParam[["sigma"]]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
lParam = c(beta1 = 0, beta2 = 0,beta3 = 0, beta4 = 0,
gamma = 0,rho = 0, sigma = 0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI=vI)
lParam[["beta4"]]
# define log-likelihood function
LL_selection <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
lParam = c(0,0,0,0,0,0,0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI=vI)
# define log-likelihood function
LL_selection <- function(lParam, vY, mX, Zgamma, vI){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
lParam = c(1,1,1,1,1,1,1)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI=vI)
lParam = c(0,0,0,0,0,0,0)
typeof(vI)
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2))))
)
return(-logL)
}
lParam = c(0,0,0,0,0,0,0)
optim(lParam, LL_selection, vY = vY, mX = mX, Zgamma = Zgamma, vI=vI)
optim(lParam, LL_selection)
lParam[7]
optim(lParam, LL_selection, method="BFGS")
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma))) +
(vI * log((dnorm((vY- mXbeta)/sigma, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2), log.p = TRUE)))
)
return(-logL)
}
lParam = c(0,0,0,0,0,0,0)
optim(lParam, LL_selection, method="BFGS")
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma,log.p = TRUE))) +
(vI * log((dnorm((vY- mXbeta)/sigma, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2), log.p = TRUE)))
)
return(-logL)
}
lParam = c(0,0,0,0,0,0,0)
optim(lParam, LL_selection, method="BFGS")
optim(lParam, LL_selection)
lParam = c(1,1,1,1,1,1,1)
optim(lParam, LL_selection)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))) +
(vI * log((dnorm((vY- mXbeta)/sigma,,mean=1,sd=1, ,log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),,mean=1,sd=1, ,log.p = TRUE)))
)
return(-logL)
}
lParam = c(1,1,1,1,1,1,1)
optim(lParam, LL_selection)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))) +
(vI * log((dnorm((vY- mXbeta)/sigma,,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),,mean=1,sd=1, ,log.p = TRUE)))
)
return(-logL)
}
lParam = c(1,1,1,1,1,1,1)
optim(lParam, LL_selection)
vY = dfEarnings$logWage
mX = cbind(1, dfEarnings$schooling, dfEarnings$age, dfEarnings$age2)
vI = as.numeric(dfEarnings$unemployed)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))) +
(vI * log((dnorm((vY- mXbeta)/sigma,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),mean=1,sd=1, ,log.p = TRUE)))
)
return(-logL)
}
lParam = c(1,1,1,1,1,1,1)
optim(lParam, LL_selection)
LL_selection(lParam)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
logL = sum(
((1 - vI)* log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))) +
(vI * log((dnorm((vY- mXbeta)/sigma,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),mean=1,sd=1, ,log.p = TRUE)))
)
print(logL)
return(-logL)
}
LL_selection(lParam)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
part1 = log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))
print(part1)
part2 = log((dnorm((vY- mXbeta)/sigma,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),mean=1,sd=1, ,log.p = TRUE))
print(part2)
logL = sum(
((1 - vI)* log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))) +
(vI * log((dnorm((vY- mXbeta)/sigma,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),mean=1,sd=1, ,log.p = TRUE)))
)
return(-logL)
}
lParam = c(1,1,1,1,1,1,1)
LL_selection(lParam)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
part1 = log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))
print(part1[1:10])
part2 = log((dnorm((vY- mXbeta)/sigma,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),mean=1,sd=1, ,log.p = TRUE))
print(part2[1:10])
logL = sum(
((1 - vI)* log(pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE))) +
(vI * log((dnorm((vY- mXbeta)/sigma,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),mean=1,sd=1, ,log.p = TRUE)))
)
return(-logL)
}
lParam = c(1,1,1,1,1,1,1)
LL_selection(lParam)
# define log-likelihood function
LL_selection <- function(lParam){
mbeta = c(lParam[1], lParam[2], lParam[3], lParam[4])
mXbeta = mX %*% mbeta
gamma = lParam[5]
rho = lParam[6]
sigma = lParam[7]
part1 = pnorm(-Zgamma,mean=1,sd=1,log.p = TRUE)
print(part1[1:10])
part2 = (dnorm((vY- mXbeta)/sigma,mean=1,sd=1, log=TRUE)*(1/sigma))*
pnorm((Zgamma+ (rho/sigma)*(vY- mXbeta))/sqrt(1-rho^2),mean=1,sd=1, ,log.p = TRUE)
print(part2[1:10])
pacman::p_load(plm,
Formula,
car,
clubSandwich,
lmtest)
dfTreatment <- data.frame(N_treated = C(100, 75, 25), N_control = c(100, 25, 75), Avg_Outcome_treated = c(9, 13,10), Avg_Outcome_control = c(7,8,9))
dfTreatment <- data.frame(N_treated = c(100, 75, 25), N_control = c(100, 25, 75), Avg_Outcome_treated = c(9, 13,10), Avg_Outcome_control = c(7,8,9))
row.names(dfTreatment) <- c("Purple", "Blue", "Green")
View(dfTreatment)
ATE_group <- dfTreatment$Avg_Outcome_treated - dfTreatment$Avg_Outcome_control
ATE_group
ATE_treated <- dfTreatment$N_treated/sum(dfTreatment$N_treated) * dfTreatment$Avg_Outcome_treated
ATE_treated
ATE_treated <- sum(dfTreatment$N_treated/sum(dfTreatment$N_treated) * dfTreatment$Avg_Outcome_treated)
ATE_treated
ATE_control <- sum(dfTreatment$N_control/sum(dfTreatment$N_control) * dfTreatment$Avg_Outcome_control)
ATE_treated - ATE_control
knitr::opts_chunk$set(echo = TRUE)
# Packes required for subsequent analysis. P_load ensures these will be installed and loaded.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(plm,
Formula,
car,
clubSandwich,
lmtest)
pacman::p_load(plm,
Formula,
car,
clubSandwich,
lmtest)
ATE_treated - ATE_control
ATE_treated - ATE_control
ATE_treated
ATE_control
ATE_treated - ATE_control
pacman::p_load(plm,
Formula,
car,
clubSandwich,
lmtest,
foreign)
pacman::p_load(plm,
Formula,
car,
clubSandwich,
lmtest,
foreign)
read.dta("../Data/bonus.dta")
getwd()
list.files("..")
read.dta("Data/bonus.dta")
dfBonus <- read.dta("Data/bonus.dta")
View(dfBonus)
dfBonus$category <- ifelse(dfBonus$bonus500 == 1, "Low-reward", ifelse(dfBonus$bonus1500 == 1, "High-reward", "Control"))
View(dfBonus)
pacman::p_load(plm,
Formula,
car,
clubSandwich,
lmtest,
foreign,
tidyverse)
dfBonus$passed_year1 <- ifelse(dfBonus$stp2001 == 60, 1,0)
%>% summarise(sum(passed_year1) = n())
dfBonus %>%
group_by(category) %>%
summarise(sum(passed_year1) = n())
dfBonus %>%
group_by(category) %>%
summarise(perc_passed_year1 = sum(passed_year1)/ n())
View(dfBonus)
dfBonus$passed_year1 <- ifelse(dfBonus$stp2001 >= 60, 1,0)
dfBonus %>%
group_by(category) %>%
summarise(perc_passed_year1 = sum(passed_year1)/ n())
View(dfBonus)
dfBonus %>%
group_by(category) %>%
summarise(perc_passed_year1 = sum(passed_year1)/ n(),
avg_myeduc = mean(myeduc),
avg_fyeduc = mean(myeduc),
avg_p0 = mean(p0),
math = mean(math),
perc_job = sum(job)/n(),
avg_effort = mean(effort))
View(dfBonus)
dfBonus %>%
group_by(category) %>%
summarise(perc_passed_year1 = sum(passed_year1)/ n(),
avg_myeduc = mean(myeduc),
avg_fyeduc = mean(myeduc),
avg_p0 = mean(p0),
math = mean(math),
perc_job = sum(job[!is.na(job)])/n(),
avg_effort = mean(effort))
dfBonus %>%
group_by(category) %>%
summarise(perc_passed_year1 = sum(passed_year1)/ n(),
avg_myeduc = mean(myeduc),
avg_fyeduc = mean(myeduc),
avg_p0 = mean(p0),
math = mean(math),
perc_job = sum(job[!is.na(job)])/n(),
avg_effort = mean(effort!is.na(effort)))
dfBonus %>%
group_by(category) %>%
summarise(perc_passed_year1 = sum(passed_year1)/ n(),
avg_myeduc = mean(myeduc),
avg_fyeduc = mean(myeduc),
avg_p0 = mean(p0),
math = mean(math),
perc_job = sum(job[!is.na(job)])/n(),
avg_effort = mean(effort[!is.na(effort)]))
dfBonus %>%
group_by(category) %>%
summarise(perc_passed_year1 = sum(passed_year1)/ n(),
avg_myeduc = mean(myeduc),
avg_fyeduc = mean(myeduc),
avg_p0 = mean(p0),
math = mean(math[!is.na(math)]),
perc_job = sum(job[!is.na(job)])/n(),
avg_effort = mean(effort[!is.na(effort)]))
dfBonus$passed_year1 == dfBonus$pass
lm(pass ~ category)
lm(pass ~ category, data=dfBonus)
LPM_simple <- lm(pass ~ category, data=dfBonus)
LPM_addedRegressors <- lm(pass ~ category + math + fyeduc + p0, data=dfBonus)
summary(LPM_simple)
summary(LPM_addedRegressors)
LPM_allRegressors <- lm(pass ~ category + math + fyeduc + p0 + effort + job, data=dfBonus)
LPM_allRegressors
vif(dfBonus)
cor(dfBonus)
mX <- dfBonus %>% select(category, math, fyeduc, p0, effort, job)
mX <- dfBonus %>% select(category, math, fyeduc, p0, effort, job) %>% as.matrix()
cor(mX)
mX <- dfBonus %>% select(math, fyeduc, p0, effort, job) %>% as.matrix()
cor(mX)
mX <- dfBonus %>% select(math, fyeduc, p0, effort, job) %>% as.matrix() %>% na.omit()
cor(mX)
vif(mX)
vif(LPM_allRegressors)
LPM_allRegressors
summary(LPM_allRegressors)
summary(LPM_addedRegressors)
summary(LPM_simple)
View(dfBonus)
LPM_drop <- lm(drop ~ category + math + fyeduc + p0 + effort + job, data=dfBonus)
View(dfBonus)
LPM_drop <- lm(dropout ~ category + math + fyeduc + p0 + effort + job, data=dfBonus)
summary(LPM_drop)
summary(LM_pointsYear1)
LM_pointsYear1 <- lm(stp2001 ~ category + math + fyeduc + p0 + effort + job, data=dfBonus)
LM_pointsYear3 <- lm(stp2004 ~ category + math + fyeduc + p0 + effort + job, data=dfBonus)
summary(LM_pointsYear1)
summary(LM_pointsYear3)
