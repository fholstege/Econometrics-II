knitr::opts_chunk$set(echo = TRUE)
# Packes required for subsequent analysis. P_load ensures these will be installed and loaded.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(plm,
Formula,
car,
clubSandwich,
lmtest,
foreign)
# Packes required for subsequent analysis. P_load ensures these will be installed and loaded.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(plm,
Formula,
car,
clubSandwich,
lmtest,
foreign)
dfSummaryStats <- dfBonus %>%
group_by(category) %>%
summarise(perc_passed_year1 = sum(pass)/ n(),
avg_myeduc = mean(myeduc),
avg_fyeduc = mean(myeduc),
avg_p0 = mean(p0),
math = mean(math[!is.na(math)]),
perc_job = sum(job[!is.na(job)])/n(),
avg_effort = mean(effort[!is.na(effort)]))
dfBonus %>%
group_by(category) %>%
summarise(perc_passed_year1 = sum(pass)/ n(),
avg_myeduc = mean(myeduc),
avg_fyeduc = mean(fyeduc),
avg_p0 = mean(p0),
math = mean(math[!is.na(math)]),
perc_job = sum(job[!is.na(job)])/n(),
avg_effort = mean(effort[!is.na(effort)]),
total = n())
pacman::p_load(tidyverse,
rio,
skimr,
stargazer,
erer)
dfBonus <- import("Data/bonus.dta")
dfBonus$category <- ifelse(dfBonus$bonus500 == 1, "Low-reward", ifelse(dfBonus$bonus1500 == 1, "High-reward", "Control"))
sum(dfBonus[dfBonus$category == "Low-reward",]$job, na.rm=T)/sum(!is.na(dfBonus[dfBonus$category == "Low-reward",]$job))
sum(dfBonus[dfBonus$category == "Low-reward",]$job, na.rm=T)/length(!is.na(dfBonus[dfBonus$category == "Low-reward",]$job))
# we shouldn't include NA's when calculating the means
dfBonus %>%
group_by(category) %>%
summarise(perc_passed_year1 = sum(pass)/ n(),
avg_myeduc = mean(myeduc),
avg_fyeduc = mean(fyeduc),
avg_p0 = mean(p0),
math = mean(math[!is.na(math)]),
perc_job = sum(job[!is.na(job)])/n(),
avg_effort = mean(effort[!is.na(effort)]),
total = n())
library(tidyverse,
rio,
skimr,
stargazer,
erer)
if (!require("pacman")) install.packages("pacman")
dfBonus <- import("Data/bonus.dta")
pacman::p_load(tidyverse,
rio,
skimr,
stargazer,
erer)
dfBonus <- import("Data/bonus.dta")
setwd("~/Documents/Econometrics-II")
dfBonus <- import("Data/bonus.dta")
dfBonus$category <- ifelse(dfBonus$bonus500 == 1, "Low-reward", ifelse(dfBonus$bonus1500 == 1, "High-reward", "Control"))
sum(dfBonus[dfBonus$category == "Low-reward",]$job, na.rm=T)/sum(!is.na(dfBonus[dfBonus$category == "Low-reward",]$job))
sum(dfBonus[dfBonus$category == "Low-reward",]$job, na.rm=T)/length(!is.na(dfBonus[dfBonus$category == "Low-reward",]$job))
dfBonus %>%
group_by(category) %>%
summarise(perc_passed_year1 = sum(pass)/ n(),
avg_myeduc = mean(myeduc),
avg_fyeduc = mean(fyeduc),
avg_p0 = mean(p0),
math = mean(math[!is.na(math)]),
perc_job = sum(job[!is.na(job)])/n(),
avg_effort = mean(effort[!is.na(effort)]),
total = n())
View(dfBonus)
# define the three LPM models
LPM_simple <- lm(pass ~ category, data=dfBonus)
LPM_addedRegressors <- lm(pass ~ category + math + fyeduc + p0, data=dfBonus)
LPM_allRegressors <- lm(pass ~ category + math + fyeduc + p0 + effort + job, data=dfBonus)
# check adjusted R2 and coefficients
# COMMENT FLO: There does not seem to be an effect of the treatment
stargazer(LPM_simple, LPM_addedRegressors, LPM_allRegressors,
keep.stat=c("n","adj.rsq"))
LPM_drop <- lm(dropout ~ category, data=dfBonus)
LPM_drop_all <- lm(dropout ~ category + math + fyeduc + p0, data=dfBonus)
LOGIT_drop <- glm(dropout ~ category, data=dfBonus,
family = binomial(link = "logit"), x = TRUE)
LOGIT_drop_all <- glm(dropout ~ category + math + fyeduc + p0, data=dfBonus,
family = binomial(link = "logit"), x = TRUE)
margins_1 <- maBina(LOGIT_drop, x.mean = FALSE)
margins_2 <- maBina(LOGIT_drop_all, x.mean = FALSE)
stargazer(LPM_drop, LPM_drop_all, margins_1, margins_2,
keep.stat=c("n","adj.rsq"))
lm_points_high <- lm(pass ~ bonus1500, dfBonus[dfBonus$category != "Low-reward",])
lm_points_low <- lm(pass ~ bonus500, dfBonus[dfBonus$category != "High-reward",])
get_MDE <- function(lm_model, group, alpha, power){
# Get the data
dfModel <- lm_model$model
# N of coefficients
n_coef <- length(lm_model$coefficients)
# N of observations
n <- nrow(dfModel)
# N of treated
nTreatment <- sum(dfModel[,group])
# Get the share of treated
p <- nTreatment/n
# Get t-value
t_alpha <- qt(1-alpha/2, n - n_coef)
t_q <- qt(1-power, n - n_coef)
# get variance of residuals
sigma2 <- var(lm_model$residuals)
# get the MDE
MDE <- (t_alpha - t_q) * sqrt(1/(p*(1-p))) * sqrt(sigma2/n)
return(MDE)
}
get_MDE(lm_points_high, "bonus1500", 0.05, 0.8)
get_MDE(lm_points_low, "bonus500", 0.05, 0.8)
get_size <- function(lm_model, group, alpha, power, MDE){
# Get the data
dfModel <- lm_model$model
# N of coefficients
n_coef <- length(lm_model$coefficients)
# N of observations
n <- nrow(dfModel)
# N of treated
nTreatment <- sum(dfModel[,group])
# Get the share of treated
p <- nTreatment/n
# Get t-value
t_alpha <- qt(1-alpha/2, n - n_coef)
t_q <- qt(1-power, n - n_coef)
# get variance of residuals
sigma2 <- var(lm_model$residuals)
# get the MDE
size <- (((t_alpha - t_q)/MDE)^2) * sigma2/(p*(1-p))
size <- round(size, 0)
return(size)
}
get_size(lm_points_high, "bonus1500", 0.05, 0.8, 0.1)
get_size(lm_points_low, "bonus500", 0.05, 0.8, 0.1)
lm_points_high <- lm(pass ~ bonus1500, dfBonus[dfBonus$category != "Low-reward",])
lm_points_low <- lm(pass ~ bonus500, dfBonus[dfBonus$category != "High-reward",])
