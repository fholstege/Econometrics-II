#========== I get different sizes (I trust my results more)
round((((1.96 + 0.84)/(1*0.25))^2) * (0.5*0.5)/(0.5*(1 - 0.5)), 0)
knitr::opts_chunk$set(echo = TRUE)
# Packes required for subsequent analysis. P_load ensures these will be installed and loaded.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(plm,
Formula,
car,
clubSandwich,
lmtest,
foreign,
tidyverse,
xtable,
stargazer,
AER,
rio,
readstata13)
# dataframe with the percentages per case/arrest and judge
dfJudge <- data.frame( perc_sentence = c(0.7, 0.3, 0.4, 0.6), perc_arrest = c(0.4, 0.6, 0.2, 0.5) )
rownames(dfJudge) <- c("Jones-Prison", "Jones-Other", "Smith-Prison", "Smith-Other")
dfJudge$perc_arrest_cond = dfJudge$perc_sentence * dfJudge$perc_arrest
PY_1_Z_1 = sum(dfJudge$perc_arrest_cond[c(1,2)])
PY_1_Z_0 = sum(dfJudge$perc_arrest_cond[c(3,4)])
PD_1_Z_1 = dfJudge$perc_sentence[1]
PD_1_Z_0 = dfJudge$perc_sentence[3]
wald_est <- (PY_1_Z_1 - PY_1_Z_0)/ (PD_1_Z_1 - PD_1_Z_0)
wald_est
get_size_givenMDE <- function(MDE, t_Alpha, t_Power, p, Sigma2){
# get the MDE
size <- (((t_Alpha - t_Power)/MDE)^2) * sigma2/(p*(1-p))
size <- round(size, 0)
return(size)
}
MDE = 0.1
t_Alpha = 1.96
t_Power = -0.524
p = 0.5
sigma2 <- p* (1- p)
size <- get_size_givenMDE(0.1, t_Alpha, t_Power, p, sigma2)
size
perc_nonComply <- 0.2
new_size = (1/(1-perc_nonComply)^2)*size
new_size
# get data on flu shots, divide in treatment and control
dfFlu <- import("FluData.dta")
dfFlu_treatment <- dfFlu[dfFlu$TreatGroup == 1,]
dfFlu_control <- dfFlu[dfFlu$TreatGroup == 0,]
# percentage that got the flu in the treatment group (got flu shot)
p_flu <- 0.8
sigma2_flu <- p_flu*(1-p_flu)
t_Alpha_flu = 1.96
t_Power_flu = -0.84
# size of the experiment, given p and sigma2
size_flu <- get_size_givenMDE(0.05, t_Alpha_flu, t_Power_flu, p_flu, sigma2_flu)
size_flu
# get df with group that actually got the treatment
dfFlu_actualTreatment <- dfFlu_treatment[dfFlu_treatment$Treatment == 1,]
perc_comply_flu <- nrow(dfFlu_actualTreatment)/nrow(dfFlu_treatment)
# get new size given the rate that did not get treatment
new_size_flu = (1/(perc_comply_flu)^2)*size_flu
new_size_flu
type_group <- ifelse(dfFlu$TreatGroup ==1 & dfFlu$Treatment == 0, "Untreated treatment",ifelse(dfFlu$TreatGroup ==1 & dfFlu$Treatment == 1, "Treated treatment","control"))
dfFlu$type_group <- type_group
dfSummary <- dfFlu %>%
group_by(type_group) %>%
summarise(perc_boy = sum(GenderChild)/n(),
mean_age_mother = mean(AgeMother),
mean_edu_mother = mean(EducationMother),
perc_married = sum(Married)/n(),
perc_nationality = sum(Nationality)/n(),
mean_HHincome = mean(Hhincome),
perc_group = n()/nrow(dfFlu)
)
xtable(dfSummary)
# define the two models
model_ols_simple <- lm(Flu ~ Treatment, data=dfFlu_treatment)
model_ols_extensive <- lm(Flu ~ Treatment + GenderChild + AgeMother + EducationMother + Married + Nationality + Hhincome, data = dfFlu_treatment)
# check the output
summary(model_ols_simple)
summary(model_ols_extensive)
calc_robust_se <- function(model){
cov_model <- vcovHC(model, type = "HC1")
robust_se <- sqrt(diag(cov_model))
return(robust_se)
}
# Adjust standard errors
robust_se_simple    <- calc_robust_se(model_ols_simple)
robust_se_extensive <- calc_robust_se(model_ols_extensive)
# create stargazer output
stargazer(model_ols_simple, model_ols_extensive, se = list(robust_se_simple, robust_se_extensive))
# run both 2sls regressions - simple and extensive model
model_ols_simple_iv <- ivreg(Flu ~ Treatment | TreatGroup, data=dfFlu)
model_ols_extensive_iv <- ivreg(Flu ~ Treatment + GenderChild + AgeMother + EducationMother + Married + Nationality + Hhincome
| TreatGroup + GenderChild + AgeMother + EducationMother + Married + Nationality + Hhincome, data=dfFlu)
summary(model_ols_simple_iv)
summary(model_ols_extensive_iv)
# Adjust standard errors
robust_se_simple_iv    <-  calc_robust_se(model_ols_simple_iv)
# Adjust standard errors
robust_se_simple_iv    <-  calc_robust_se(model_ols_simple_iv)
robust_se_extensive_iv <-  calc_robust_se(model_ols_extensive_iv)
# create stargazer output
stargazer(model_ols_simple_iv, model_ols_extensive_iv, se = list(robust_se_simple_iv, robust_se_extensive_iv))
round((((1.96 + 0.524)/0.1)^2) * (0.5*0.5)/(0.5*(1 - 0.5)), 0)
#-----------------------------
# (ii): determine size with non-compliers
round((((1.96 + 0.524)/(0.8*0.1))^2) * (0.5*0.5)/(0.5*(1 - 0.5)), 0)
#-----------------------------
# (ii): determine size with non-compliers
round((((1.96 + 0.524)/(0.8*0.1))^2) * (0.5*0.5)/(0.5*(1 - 0.5)))
get_size_givenMDE <- function(MDE, t_Alpha, t_Power, p, Sigma2){
# get the MDE
size <- (((t_Alpha - t_Power)/MDE)^2) * sigma2/(p*(1-p))
size <- round(size, 0)
return(size)
}
MDE = 0.1
t_Alpha = 1.96
t_Power = -0.524
p = 0.5
sigma2 <- p* (1- p)
size <- get_size_givenMDE(0.1, t_Alpha, t_Power, p, sigma2)
size
perc_nonComply <- 0.2
new_size = (1/(1-perc_nonComply)^2)*size
new_size
# get data on flu shots, divide in treatment and control
dfFlu <- import("FluData.dta")
dfFlu_treatment <- dfFlu[dfFlu$TreatGroup == 1,]
dfFlu_control <- dfFlu[dfFlu$TreatGroup == 0,]
# percentage that got the flu in the treatment group (got flu shot)
p_flu <- 0.8
#------------------------
# Problem 3
setwd("~/Documents/Econometrics-II")
dfFlu_treatment <- dfFlu[dfFlu$TreatGroup == 1,]
dfFlu_control <- dfFlu[dfFlu$TreatGroup == 0,]
# (i) Calculate variance for the control group AND size
p <- sum(dfFlu_control$Flu)/nrow(dfFlu_control)
sigma2 <- p*(1-p)
print(p)
print(sigma2)
round((((1.96 + 0.84)/0.05)^2) * (sigma2)/(0.8*(1 - 0.8)), 0)
# (ii) Fraction of actual recevers of the flu shot
p_actual <- sum(dfFlu_treatment$Treatment)/nrow(dfFlu_treatment)
round((((1.96 + 0.84)/(p_actual*0.05))^2) * (sigma2)/(0.8*(1 - 0.8)), 0)
# percentage that got the flu in the treatment group (got flu shot)
p_flu <- 0.8
sigma2_flu <- p_flu*(1-p_flu)
t_Alpha_flu = 1.96
t_Power_flu = -0.84
# size of the experiment, given p and sigma2
size_flu <- get_size_givenMDE(0.05, t_Alpha_flu, t_Power_flu, p_flu, sigma2_flu)
size_flu
# get df with group that actually got the treatment
dfFlu_actualTreatment <- dfFlu_treatment[dfFlu_treatment$Treatment == 1,]
perc_comply_flu <- nrow(dfFlu_actualTreatment)/nrow(dfFlu_treatment)
# get new size given the rate that did not get treatment
new_size_flu = (1/(perc_comply_flu)^2)*size_flu
new_size_flu
# (i) Calculate variance for the control group AND size
p <- sum(dfFlu_control$Flu)/nrow(dfFlu_control)
sigma2 <- p*(1-p)
print(p)
sigma2
size_flu
perc_comply_flu
new_size_flu
xtable(dfSummary)
dfSummary <- dfFlu %>%
group_by(type_group) %>%
summarise(perc_boy = sum(GenderChild)/n(),
mean_age_mother = mean(AgeMother),
mean_edu_mother = mean(EducationMother),
perc_married = sum(Married)/n(),
perc_nationality = sum(Nationality)/n(),
mean_HHincome = mean(Hhincome),
perc_group = n()/nrow(dfFlu)
)
xtable(dfSummary)
dfSummary <- dfFlu %>%
group_by(type_group) %>%
summarise(boy = sum(GenderChild)/n(),
age_mother = mean(AgeMother),
edu_mother = mean(EducationMother),
married = sum(Married)/n(),
nationality = sum(Nationality)/n(),
income = mean(Hhincome),
share = n()/nrow(dfFlu)
)
xtable(dfSummary)
xtable(dfSummary)
dfSummary <- dfFlu %>%
group_by(type_group) %>%
summarise(boy = sum(GenderChild)/n(),
age_mother = mean(AgeMother),
edu_mother = mean(EducationMother),
married = sum(Married)/n(),
nationality = sum(Nationality)/n(),
income = mean(Hhincome),
share = n()/nrow(dfFlu)
)
type_group <- ifelse(dfFlu$TreatGroup ==1 & dfFlu$Treatment == 0, "Untreated treatment",ifelse(dfFlu$TreatGroup ==1 & dfFlu$Treatment == 1, "Treated treatment","control"))
dfFlu$type_group <- type_group
dfSummary <- dfFlu %>%
group_by(type_group) %>%
summarise(boy = sum(GenderChild)/n(),
age_mother = mean(AgeMother),
edu_mother = mean(EducationMother),
married = sum(Married)/n(),
nationality = sum(Nationality)/n(),
income = mean(Hhincome),
share = n()/nrow(dfFlu)
)
xtable(dfSummary)
type_group <- ifelse(dfFlu$TreatGroup ==1 & dfFlu$Treatment == 0, "Untreated treatment",ifelse(dfFlu$TreatGroup ==1 & dfFlu$Treatment == 1, "Treated treatment","Control"))
dfFlu$type_group <- type_group
t.test(dfFlu[dfFlu$type_group == "Control",]$effort, dfFlu[dfFlu$type_group == "Untreated treatment",]$effort)
t.test(dfFlu[dfFlu$type_group == "Control",]$AgeMother, dfFlu[dfFlu$type_group == "Untreated treatment",]$AgeMother)
View(dfFlu)
sapply(dfFlu[,1:6], function(i) t.test(i ~ dfFlu$type_group)$p.value)
sapply(dfFlu[dfFlu$type_group != "Treated treatment",1:6], function(i) t.test(i ~ dfFlu$type_group)$p.value)
sapply(dfFlu[dfFlu$type_group != "Treated treatment",1:6], function(i) t.test(i ~ dfFlu[dfFlu$type_group != "Treated treatment",]$type_group)$p.value)
6.216732e-01
2.462656e-52
1.242490e-03
2.996576e-07
sapply(dfFlu[dfFlu$type_group != "Untreated treatment",1:6], function(i) t.test(i ~ dfFlu[dfFlu$type_group != "Untreated treatment",]$type_group)$p.value)
6.803433e-01
5.858727e-06
dfSummary_two <- dfFlu %>%
group_by(TreatGroup) %>%
summarise(boy = sum(GenderChild)/n(),
age_mother = mean(AgeMother),
edu_mother = mean(EducationMother),
married = sum(Married)/n(),
nationality = sum(Nationality)/n(),
income = mean(Hhincome),
share = n()/nrow(dfFlu)
)
xtable(dfSummary_two)
sapply(dfFlu[,1:6], function(i) t.test(i ~ dfFlu$TreatGroup)$p.value)
sapply(dfFlu[dfFlu$type_group != "Control",1:6], function(i) t.test(i ~ dfFlu[dfFlu$type_group != "Control",]$type_group)$p.value)
8.724048e-01
# define the two models
model_ols_simple <- lm(Flu ~ Treatment, data=dfFlu_treatment)
model_ols_extensive <- lm(Flu ~ Treatment + GenderChild + AgeMother + EducationMother + Married + Nationality + Hhincome, data = dfFlu_treatment)
# check the output
summary(model_ols_simple)
summary(model_ols_extensive)
calc_robust_se <- function(model){
cov_model <- vcovHC(model, type = "HC1")
robust_se <- sqrt(diag(cov_model))
return(robust_se)
}
# Adjust standard errors
robust_se_simple    <- calc_robust_se(model_ols_simple)
robust_se_extensive <- calc_robust_se(model_ols_extensive)
# create stargazer output
stargazer(model_ols_simple, model_ols_extensive, se = list(robust_se_simple, robust_se_extensive))
# create stargazer output
stargazer(model_ols_simple, model_ols_extensive, se = list(robust_se_simple, robust_se_extensive),
keep.stat=c("n","adj.rsq"),
title = "The effect of flu vaccine on the probability to get flu in the treatment group")
# run both 2sls regressions - simple and extensive model
model_ols_simple_iv <- ivreg(Flu ~ Treatment | TreatGroup, data=dfFlu)
model_ols_extensive_iv <- ivreg(Flu ~ Treatment + GenderChild + AgeMother + EducationMother + Married + Nationality + Hhincome
| TreatGroup + GenderChild + AgeMother + EducationMother + Married + Nationality + Hhincome, data=dfFlu)
summary(model_ols_simple_iv)
summary(model_ols_extensive_iv)
# Adjust standard errors
robust_se_simple_iv    <-  calc_robust_se(model_ols_simple_iv)
# Adjust standard errors
robust_se_simple_iv    <-  calc_robust_se(model_ols_simple_iv)
robust_se_extensive_iv <-  calc_robust_se(model_ols_extensive_iv)
# create stargazer output
stargazer(model_ols_simple_iv, model_ols_extensive_iv, se = list(robust_se_simple_iv, robust_se_extensive_iv),
keep.stat=c("n","adj.rsq"),
title = "The effect of flu vaccine on the probability to get flu using an instrumental variable")
# run partial regression
## not affraid of irrelevant instrument, since 67% overlap...
Partial_ols_FluShot <- lm(Treatment ~ TreatGroup, data=dfFlu)
summary(Partial_ols_FluShot)
stargazer(Partial_ols_FluShot,
keep.stat=c("n","adj.rsq"),
title = "The first-stage regression of the IV estimator")
stargazer(Partial_ols_FluShot,
keep.stat=c("n","adj.rsq", "f"),
title = "The first-stage regression of the IV estimator")
